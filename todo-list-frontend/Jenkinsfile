pipeline {
    agent any
    tools {
        nodejs 'nodejs'
        jdk 'jdk'
    }

    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        PROJECT_ID = credentials('PROJECT-ID')
        GCP_GAR_REPO_FE_NAME = credentials('GAR-REPO-FE')
        GCP_REGION = 'asia-southeast1'
        REPO_URL = """${GCP_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GAR_REPO_FE_NAME}"""
        GITHUB_USERNAME = credentials('github-username')
        GITHUB_EMAIL = credentials('github-email')
        GITHUB_REPO_NAME = credentials('github-repo-name')
        GITHUB_CRED = credentials('github-webhook')
        SONAR_AUTH_TOKEN = credentials('sonar-token')
        IMAGE_NAME = 'todo-list-frontend'
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github-webhook', 
                    url: 'https://github.com/Fitriawan-Arya-N/todo-list-app.git'
            }
        }

        stage('SonarQube: Code Analysis') {
            steps {
                dir('todo-list-frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=todo-list-frontend \
                            -Dsonar.projectKey=todo-list-frontend \
                            -Dsonar.host.url=http://35.240.137.19:9000/ \
                            -Dsonar.login=${SONAR_AUTH_TOKEN}
                        '''
                    }
                }
            }
        }

        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('todo-list-frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('todo-list-frontend') {
                    script {
                        sh '''
                            docker rmi -f ${GCP_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GAR_REPO_FE_NAME}/${IMAGE_NAME}:${BUILD_NUMBER} || true
                            docker build -t ${GCP_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GAR_REPO_FE_NAME}/${IMAGE_NAME}:${BUILD_NUMBER} .
                        '''
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh 'trivy image ${REPO_URL}/${IMAGE_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
                }
            }
        }

        stage('Push Image to GAR') {
            steps {
                script {
                    sh '''
                        gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
                        docker tag ${GCP_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GAR_REPO_FE_NAME}/${IMAGE_NAME}:${BUILD_NUMBER} ${GCP_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GAR_REPO_FE_NAME}/${IMAGE_NAME}:${BUILD_NUMBER}
                        docker push ${GCP_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GAR_REPO_FE_NAME}/${IMAGE_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                dir('kubernetes-manifest-file/todo-list-frontend') {
                    withCredentials([string(credentialsId: 'github-webhook-token', variable: 'GITHUB_TOKEN')]) {
                        script {
                            sh '''
                                git config user.email "${GITHUB_EMAIL}"
                                git config user.name "${GITHUB_USERNAME}"

                                imageTag=$(grep -oP '(?<=todo-list-frontend:)[^ ]+' deployment.yaml)
                                sed -i "s/${imageTag}/${BUILD_NUMBER}/" deployment.yaml

                                git add deployment.yaml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_CRED}@github.com/${GITHUB_USERNAME}/${GITHUB_REPO_NAME}.git HEAD:main
                                if [ $? -eq 0 ]; then
                                    echo "Git push successful"
                                else
                                    echo "Git push failed"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished'
        }
        success {
            echo 'Pipeline finished successfully'
        }
        failure {
            echo 'Pipeline finished with failure'
        }
        unstable {
            echo 'Pipeline finished with unstable status'
        }
        cleanup {
            echo 'Cleaning up resources'
        }
    }
}
